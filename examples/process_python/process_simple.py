# процессы не имеют общей памяти
# они могут взаимодействовать друг с другом [неявно] используя средства ОС
# зато, в отличии от потоков в Python, они могут выполнятся ||

# для взаимодействия потоков используйте классы:
# Pipe, Queue -- для динамического (уже во время работы процесса) обмена данными между процессами
# https://stackoverflow.com/questions/8463008/multiprocessing-pipe-vs-queue


import multiprocessing
from math import sin

def process_function(N, result):
    # у этой функции, когда она выполняется в отдельной процессе, будет полностью своя область памяти
    # поэтому глобальные переменные здесь использовать нельзя
    # обращаться к стандартному выводу основного процесса -- тоже
    sum = 0
    for i in range(N):
        sum += sin(i)

    # используем очередь только для того, чтобы поместить в неё результат
    result.put( sum )


# создание процесса
data = multiprocessing.Queue()
# Queue -- очередь. любой процесс может писать туда данные .put( ... ), любой процесс может данные получать .get()
p = multiprocessing.Process(target = process_function, args = (100000000, data))
p.start()  # запуск
p.join()  # ожидание завершения
sum = data.get()
print(f"{sum:.6f}")


